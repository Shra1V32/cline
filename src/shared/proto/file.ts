// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire"
import { Empty, StringRequest } from "./common"

export const protobufPackage = "cline"

/** Request for searching files */
export interface SearchFilesRequest {
	/** Directory path to search in */
	path: string
	/** File pattern to match (glob) */
	pattern: string
	/** Regular expression to search for */
	regex: string
	/** Whether to search recursively */
	recursive: boolean
}

/** Response for a file search result */
export interface SearchFilesResponse {
	/** Batch of search results */
	results: SearchFilesResponse_FileResult[]
	/** Whether this is the last batch */
	isComplete: boolean
}

/** Individual file result */
export interface SearchFilesResponse_FileResult {
	/** Path to the file */
	path: string
	/** Type of result (file or folder) */
	type: string
	/** Matches within the file (if any) */
	matches: SearchFilesResponse_MatchResult[]
}

/** Match result within a file */
export interface SearchFilesResponse_MatchResult {
	/** Line number of the match */
	lineNumber: number
	/** Content of the line with the match */
	lineContent: string
	/** Context lines before the match */
	contextBefore: string
	/** Context lines after the match */
	contextAfter: string
}

function createBaseSearchFilesRequest(): SearchFilesRequest {
	return { path: "", pattern: "", regex: "", recursive: false }
}

export const SearchFilesRequest: MessageFns<SearchFilesRequest> = {
	encode(message: SearchFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.path !== "") {
			writer.uint32(10).string(message.path)
		}
		if (message.pattern !== "") {
			writer.uint32(18).string(message.pattern)
		}
		if (message.regex !== "") {
			writer.uint32(26).string(message.regex)
		}
		if (message.recursive !== false) {
			writer.uint32(32).bool(message.recursive)
		}
		return writer
	},

	decode(input: BinaryReader | Uint8Array, length?: number): SearchFilesRequest {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
		let end = length === undefined ? reader.len : reader.pos + length
		const message = createBaseSearchFilesRequest()
		while (reader.pos < end) {
			const tag = reader.uint32()
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break
					}

					message.path = reader.string()
					continue
				}
				case 2: {
					if (tag !== 18) {
						break
					}

					message.pattern = reader.string()
					continue
				}
				case 3: {
					if (tag !== 26) {
						break
					}

					message.regex = reader.string()
					continue
				}
				case 4: {
					if (tag !== 32) {
						break
					}

					message.recursive = reader.bool()
					continue
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break
			}
			reader.skip(tag & 7)
		}
		return message
	},

	fromJSON(object: any): SearchFilesRequest {
		return {
			path: isSet(object.path) ? globalThis.String(object.path) : "",
			pattern: isSet(object.pattern) ? globalThis.String(object.pattern) : "",
			regex: isSet(object.regex) ? globalThis.String(object.regex) : "",
			recursive: isSet(object.recursive) ? globalThis.Boolean(object.recursive) : false,
		}
	},

	toJSON(message: SearchFilesRequest): unknown {
		const obj: any = {}
		if (message.path !== "") {
			obj.path = message.path
		}
		if (message.pattern !== "") {
			obj.pattern = message.pattern
		}
		if (message.regex !== "") {
			obj.regex = message.regex
		}
		if (message.recursive !== false) {
			obj.recursive = message.recursive
		}
		return obj
	},

	create<I extends Exact<DeepPartial<SearchFilesRequest>, I>>(base?: I): SearchFilesRequest {
		return SearchFilesRequest.fromPartial(base ?? ({} as any))
	},
	fromPartial<I extends Exact<DeepPartial<SearchFilesRequest>, I>>(object: I): SearchFilesRequest {
		const message = createBaseSearchFilesRequest()
		message.path = object.path ?? ""
		message.pattern = object.pattern ?? ""
		message.regex = object.regex ?? ""
		message.recursive = object.recursive ?? false
		return message
	},
}

function createBaseSearchFilesResponse(): SearchFilesResponse {
	return { results: [], isComplete: false }
}

export const SearchFilesResponse: MessageFns<SearchFilesResponse> = {
	encode(message: SearchFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		for (const v of message.results) {
			SearchFilesResponse_FileResult.encode(v!, writer.uint32(10).fork()).join()
		}
		if (message.isComplete !== false) {
			writer.uint32(16).bool(message.isComplete)
		}
		return writer
	},

	decode(input: BinaryReader | Uint8Array, length?: number): SearchFilesResponse {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
		let end = length === undefined ? reader.len : reader.pos + length
		const message = createBaseSearchFilesResponse()
		while (reader.pos < end) {
			const tag = reader.uint32()
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break
					}

					message.results.push(SearchFilesResponse_FileResult.decode(reader, reader.uint32()))
					continue
				}
				case 2: {
					if (tag !== 16) {
						break
					}

					message.isComplete = reader.bool()
					continue
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break
			}
			reader.skip(tag & 7)
		}
		return message
	},

	fromJSON(object: any): SearchFilesResponse {
		return {
			results: globalThis.Array.isArray(object?.results)
				? object.results.map((e: any) => SearchFilesResponse_FileResult.fromJSON(e))
				: [],
			isComplete: isSet(object.isComplete) ? globalThis.Boolean(object.isComplete) : false,
		}
	},

	toJSON(message: SearchFilesResponse): unknown {
		const obj: any = {}
		if (message.results?.length) {
			obj.results = message.results.map((e) => SearchFilesResponse_FileResult.toJSON(e))
		}
		if (message.isComplete !== false) {
			obj.isComplete = message.isComplete
		}
		return obj
	},

	create<I extends Exact<DeepPartial<SearchFilesResponse>, I>>(base?: I): SearchFilesResponse {
		return SearchFilesResponse.fromPartial(base ?? ({} as any))
	},
	fromPartial<I extends Exact<DeepPartial<SearchFilesResponse>, I>>(object: I): SearchFilesResponse {
		const message = createBaseSearchFilesResponse()
		message.results = object.results?.map((e) => SearchFilesResponse_FileResult.fromPartial(e)) || []
		message.isComplete = object.isComplete ?? false
		return message
	},
}

function createBaseSearchFilesResponse_FileResult(): SearchFilesResponse_FileResult {
	return { path: "", type: "", matches: [] }
}

export const SearchFilesResponse_FileResult: MessageFns<SearchFilesResponse_FileResult> = {
	encode(message: SearchFilesResponse_FileResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.path !== "") {
			writer.uint32(10).string(message.path)
		}
		if (message.type !== "") {
			writer.uint32(18).string(message.type)
		}
		for (const v of message.matches) {
			SearchFilesResponse_MatchResult.encode(v!, writer.uint32(26).fork()).join()
		}
		return writer
	},

	decode(input: BinaryReader | Uint8Array, length?: number): SearchFilesResponse_FileResult {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
		let end = length === undefined ? reader.len : reader.pos + length
		const message = createBaseSearchFilesResponse_FileResult()
		while (reader.pos < end) {
			const tag = reader.uint32()
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break
					}

					message.path = reader.string()
					continue
				}
				case 2: {
					if (tag !== 18) {
						break
					}

					message.type = reader.string()
					continue
				}
				case 3: {
					if (tag !== 26) {
						break
					}

					message.matches.push(SearchFilesResponse_MatchResult.decode(reader, reader.uint32()))
					continue
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break
			}
			reader.skip(tag & 7)
		}
		return message
	},

	fromJSON(object: any): SearchFilesResponse_FileResult {
		return {
			path: isSet(object.path) ? globalThis.String(object.path) : "",
			type: isSet(object.type) ? globalThis.String(object.type) : "",
			matches: globalThis.Array.isArray(object?.matches)
				? object.matches.map((e: any) => SearchFilesResponse_MatchResult.fromJSON(e))
				: [],
		}
	},

	toJSON(message: SearchFilesResponse_FileResult): unknown {
		const obj: any = {}
		if (message.path !== "") {
			obj.path = message.path
		}
		if (message.type !== "") {
			obj.type = message.type
		}
		if (message.matches?.length) {
			obj.matches = message.matches.map((e) => SearchFilesResponse_MatchResult.toJSON(e))
		}
		return obj
	},

	create<I extends Exact<DeepPartial<SearchFilesResponse_FileResult>, I>>(base?: I): SearchFilesResponse_FileResult {
		return SearchFilesResponse_FileResult.fromPartial(base ?? ({} as any))
	},
	fromPartial<I extends Exact<DeepPartial<SearchFilesResponse_FileResult>, I>>(object: I): SearchFilesResponse_FileResult {
		const message = createBaseSearchFilesResponse_FileResult()
		message.path = object.path ?? ""
		message.type = object.type ?? ""
		message.matches = object.matches?.map((e) => SearchFilesResponse_MatchResult.fromPartial(e)) || []
		return message
	},
}

function createBaseSearchFilesResponse_MatchResult(): SearchFilesResponse_MatchResult {
	return { lineNumber: 0, lineContent: "", contextBefore: "", contextAfter: "" }
}

export const SearchFilesResponse_MatchResult: MessageFns<SearchFilesResponse_MatchResult> = {
	encode(message: SearchFilesResponse_MatchResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.lineNumber !== 0) {
			writer.uint32(8).int32(message.lineNumber)
		}
		if (message.lineContent !== "") {
			writer.uint32(18).string(message.lineContent)
		}
		if (message.contextBefore !== "") {
			writer.uint32(26).string(message.contextBefore)
		}
		if (message.contextAfter !== "") {
			writer.uint32(34).string(message.contextAfter)
		}
		return writer
	},

	decode(input: BinaryReader | Uint8Array, length?: number): SearchFilesResponse_MatchResult {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
		let end = length === undefined ? reader.len : reader.pos + length
		const message = createBaseSearchFilesResponse_MatchResult()
		while (reader.pos < end) {
			const tag = reader.uint32()
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 8) {
						break
					}

					message.lineNumber = reader.int32()
					continue
				}
				case 2: {
					if (tag !== 18) {
						break
					}

					message.lineContent = reader.string()
					continue
				}
				case 3: {
					if (tag !== 26) {
						break
					}

					message.contextBefore = reader.string()
					continue
				}
				case 4: {
					if (tag !== 34) {
						break
					}

					message.contextAfter = reader.string()
					continue
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break
			}
			reader.skip(tag & 7)
		}
		return message
	},

	fromJSON(object: any): SearchFilesResponse_MatchResult {
		return {
			lineNumber: isSet(object.lineNumber) ? globalThis.Number(object.lineNumber) : 0,
			lineContent: isSet(object.lineContent) ? globalThis.String(object.lineContent) : "",
			contextBefore: isSet(object.contextBefore) ? globalThis.String(object.contextBefore) : "",
			contextAfter: isSet(object.contextAfter) ? globalThis.String(object.contextAfter) : "",
		}
	},

	toJSON(message: SearchFilesResponse_MatchResult): unknown {
		const obj: any = {}
		if (message.lineNumber !== 0) {
			obj.lineNumber = Math.round(message.lineNumber)
		}
		if (message.lineContent !== "") {
			obj.lineContent = message.lineContent
		}
		if (message.contextBefore !== "") {
			obj.contextBefore = message.contextBefore
		}
		if (message.contextAfter !== "") {
			obj.contextAfter = message.contextAfter
		}
		return obj
	},

	create<I extends Exact<DeepPartial<SearchFilesResponse_MatchResult>, I>>(base?: I): SearchFilesResponse_MatchResult {
		return SearchFilesResponse_MatchResult.fromPartial(base ?? ({} as any))
	},
	fromPartial<I extends Exact<DeepPartial<SearchFilesResponse_MatchResult>, I>>(object: I): SearchFilesResponse_MatchResult {
		const message = createBaseSearchFilesResponse_MatchResult()
		message.lineNumber = object.lineNumber ?? 0
		message.lineContent = object.lineContent ?? ""
		message.contextBefore = object.contextBefore ?? ""
		message.contextAfter = object.contextAfter ?? ""
		return message
	},
}

/** Service for file-related operations */
export type FileServiceDefinition = typeof FileServiceDefinition
export const FileServiceDefinition = {
	name: "FileService",
	fullName: "cline.FileService",
	methods: {
		/** Opens a file in the editor */
		openFile: {
			name: "openFile",
			requestType: StringRequest,
			requestStream: false,
			responseType: Empty,
			responseStream: false,
			options: {},
		},
		/** Opens an image in the system viewer */
		openImage: {
			name: "openImage",
			requestType: StringRequest,
			requestStream: false,
			responseType: Empty,
			responseStream: false,
			options: {},
		},
		/** Search for files and stream results back */
		searchFiles: {
			name: "searchFiles",
			requestType: SearchFilesRequest,
			requestStream: false,
			responseType: SearchFilesResponse,
			responseStream: true,
			options: {},
		},
	},
} as const

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
	? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }

function isSet(value: any): boolean {
	return value !== null && value !== undefined
}

export interface MessageFns<T> {
	encode(message: T, writer?: BinaryWriter): BinaryWriter
	decode(input: BinaryReader | Uint8Array, length?: number): T
	fromJSON(object: any): T
	toJSON(message: T): unknown
	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
