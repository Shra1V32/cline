// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire"
import { EmptyRequest } from "./common"

export const protobufPackage = "cline"

export interface ExtensionState {
	stateJson: string
}

function createBaseExtensionState(): ExtensionState {
	return { stateJson: "" }
}

export const ExtensionState: MessageFns<ExtensionState> = {
	encode(message: ExtensionState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.stateJson !== "") {
			writer.uint32(10).string(message.stateJson)
		}
		return writer
	},

	decode(input: BinaryReader | Uint8Array, length?: number): ExtensionState {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
		let end = length === undefined ? reader.len : reader.pos + length
		const message = createBaseExtensionState()
		while (reader.pos < end) {
			const tag = reader.uint32()
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break
					}

					message.stateJson = reader.string()
					continue
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break
			}
			reader.skip(tag & 7)
		}
		return message
	},

	fromJSON(object: any): ExtensionState {
		return { stateJson: isSet(object.stateJson) ? globalThis.String(object.stateJson) : "" }
	},

	toJSON(message: ExtensionState): unknown {
		const obj: any = {}
		if (message.stateJson !== "") {
			obj.stateJson = message.stateJson
		}
		return obj
	},

	create<I extends Exact<DeepPartial<ExtensionState>, I>>(base?: I): ExtensionState {
		return ExtensionState.fromPartial(base ?? ({} as any))
	},
	fromPartial<I extends Exact<DeepPartial<ExtensionState>, I>>(object: I): ExtensionState {
		const message = createBaseExtensionState()
		message.stateJson = object.stateJson ?? ""
		return message
	},
}

export type StateServiceDefinition = typeof StateServiceDefinition
export const StateServiceDefinition = {
	name: "StateService",
	fullName: "cline.StateService",
	methods: {
		getLatestState: {
			name: "getLatestState",
			requestType: EmptyRequest,
			requestStream: false,
			responseType: ExtensionState,
			responseStream: false,
			options: {},
		},
	},
} as const

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
	? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }

function isSet(value: any): boolean {
	return value !== null && value !== undefined
}

export interface MessageFns<T> {
	encode(message: T, writer?: BinaryWriter): BinaryWriter
	decode(input: BinaryReader | Uint8Array, length?: number): T
	fromJSON(object: any): T
	toJSON(message: T): unknown
	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
